{"version":3,"sources":["components/vicat_logo.svg","components/Logo.js","components/CurrentApp.js","components/UserStatus.js","components/SideNavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","vicat_logo","alt","height","CurrentApp","UserStatus","useStyles","makeStyles","theme","root","background","border","borderRadius","boxShadow","color","padding","SideNavBar","classes","className","TreeView","defaultCollapseIcon","defaultExpandIcon","TreeItem","nodeId","label","App","this","props","Grid","container","spacing","item","xs","topBar","React","Component","withStyles","backgroundColor","minHeight","display","justifyContent","textAlign","palette","text","secondary","paper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,wC,8LCG5B,SAASC,IACvB,OACC,6BACC,yBAAKC,IAAKC,IAAYC,IAAI,aAAaC,OAAO,UCJlC,SAASC,IACvB,OACC,oDCFa,SAASC,IACvB,OACC,oD,8DCGIC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACDC,WAAY,mDACdC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPX,OAAQ,QACRY,QAAS,eAKC,SAASC,IACvB,IAAMC,EAAUX,IAChB,OACC,yBAAKY,UAAWD,EAAQR,MACpB,kBAACU,EAAA,EAAD,CACED,UAAWD,EAAQR,KACnBW,oBAAqB,kBAAC,IAAD,MACrBC,kBAAmB,kBAAC,IAAD,OAEnB,kBAACC,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,qBACzB,kBAACF,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,WAC3B,kBAACF,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,eAE7B,kBAACF,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,mBACzB,kBAACF,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,kBAC3B,kBAACF,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,iBAE7B,kBAACF,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,wBACzB,kBAACF,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,gBAC3B,kBAACF,EAAA,EAAD,CAAUC,OAAO,IAAIC,MAAM,eAE7B,kBAACF,EAAA,EAAD,CAAUC,OAAO,KAAKC,MAAM,wBAC1B,kBAACF,EAAA,EAAD,CAAUC,OAAO,KAAKC,MAAM,aAC5B,kBAACF,EAAA,EAAD,CAAUC,OAAO,KAAKC,MAAM,wBAC5B,kBAACF,EAAA,EAAD,CAAUC,OAAO,KAAKC,MAAM,2B,mBCZhCC,E,uKACK,IACAR,EAAWS,KAAKC,MAAhBV,QACP,OACE,yBAAKC,UAAWD,EAAQR,MACtB,kBAACmB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAW,GAC3B,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAK,IACd,yBAAKd,UAAaD,EAAQgB,QACxB,kBAAClC,EAAD,MACA,kBAACK,EAAD,MACA,kBAACC,EAAD,QAGJ,kBAACuB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAEX,kBAAChB,EAAD,OAGJ,kBAACY,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,qB,GAlBUE,IAAMC,WA2BTC,eAjDG,SAAA5B,GAAK,MAAK,CAC1BC,KAAM,CACJ4B,gBAAgB,UAChBC,UAAU,SAEZL,OAAQ,CACNM,QAAQ,OACRC,eAAe,gBACfzB,QAASP,EAAMsB,QAAQ,GACvBW,UAAW,SACX3B,MAAON,EAAMkC,QAAQC,KAAKC,UAC1BzC,OAAQ,OACRkC,gBAAgB,WAElBQ,MAAM,CACJ9B,QAASP,EAAMsB,QAAQ,GACvBO,gBAAgB,UAChBlC,OAAO,WAgCIiC,CAAsBX,GC/CjBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.59d0ba7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vicat_logo.3e16c13d.svg\";","import React from 'react';\r\nimport vicat_logo from './vicat_logo.svg'\r\n\r\nexport default function Logo() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img src={vicat_logo} alt=\"Vicat Logo\" height=\"45px\" />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport default function CurrentApp() {\r\n\treturn (\r\n\t\t<div>Current App is here</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\n\r\nexport default function UserStatus() {\r\n\treturn (\r\n\t\t<div>user status is here</div>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n  \t    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n\t    border: 0,\r\n\t    borderRadius: 3,\r\n\t    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n\t    color: 'white',\r\n\t    height: \"100vh\",\r\n\t    padding: '3px 3px',\r\n  },\r\n}));\r\n\r\n\r\nexport default function SideNavBar() {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t    <TreeView\r\n\t\t      className={classes.root}\r\n\t\t      defaultCollapseIcon={<ExpandMoreIcon />}\r\n\t\t      defaultExpandIcon={<ChevronRightIcon />}\r\n\t\t    >\r\n\t\t      <TreeItem nodeId=\"1\" label=\"Assets Management\">\r\n\t\t        <TreeItem nodeId=\"2\" label=\"Assets\" />\r\n\t\t        <TreeItem nodeId=\"3\" label=\"Locations\" />\r\n\t\t      </TreeItem>\r\n\t\t      <TreeItem nodeId=\"4\" label=\"Work Management\">\r\n\t\t        <TreeItem nodeId=\"5\" label=\"Work Requests\" />\r\n\t\t        <TreeItem nodeId=\"6\" label=\"Work Orders\" />\r\n\t\t      </TreeItem>\r\n\t\t      <TreeItem nodeId=\"7\" label=\"Inventory Management\">\r\n\t\t        <TreeItem nodeId=\"8\" label=\"Item Master\" />\r\n\t\t        <TreeItem nodeId=\"9\" label=\"Inventory\" />\r\n\t\t      </TreeItem>\r\n\t\t      <TreeItem nodeId=\"10\" label=\"Performance Analysis\">\r\n\t\t        <TreeItem nodeId=\"11\" label=\"Downtime\" />\r\n\t\t        <TreeItem nodeId=\"12\" label=\"Root Cause Analysis\" />\r\n\t\t        <TreeItem nodeId=\"13\" label=\"Performance Metrics\" />\r\n\t\t      </TreeItem>\r\n\r\n\r\n\t\t    </TreeView>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from 'react';\nimport Logo from './components/Logo';\nimport CurrentApp from './components/CurrentApp';\nimport UserStatus from './components/UserStatus';\nimport SideNavBar from './components/SideNavBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst useStyles = theme => ({\n  root: {\n    backgroundColor:\"#D3D3D3\",\n    minHeight:\"100vh\",\n  },\n  topBar: {\n    display:\"flex\",\n    justifyContent:\"space-between\",\n    padding: theme.spacing(0),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    height: \"40px\",\n    backgroundColor:\"#00b0ff\",\n  },\n  paper:{\n    padding: theme.spacing(1),\n    backgroundColor:\"#f0ffff\",\n    height:\"100%\",\n  },\n\n});\n\nclass App extends React.Component {\n  render(){\n    const {classes} = this.props;\n    return (\n      <div className={classes.root}>\n        <Grid container spacing = {0} >\n        <Grid item xs ={12}>\n          <div className = {classes.topBar} >\n            <Logo />\n            <CurrentApp />\n            <UserStatus />\n          </div>\n        </Grid>\n        <Grid item xs={3} >\n\n            <SideNavBar />\n\n        </Grid>\n        <Grid item xs={9} >\nmain window\n        </Grid>\n      </Grid>\n      </div>\n    );  \n  }\n}\n\nexport default withStyles(useStyles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}